#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
typedef struct BiTNode {//?????
    char data;                      //??
    struct BiTNode *lchild,*rchild; //??????
} BiTNode,*BiTree;
int nn=0;
int CreateBiTree(BiTree *T) {//??????????
    char data;
    scanf("%c",&data);//???????????????(????),‘#’????
    if (data == '#') {
        *T = NULL;
    } else {
        *T = (BiTree)malloc(sizeof(BiTNode)); nn++;
        (*T)->data = data;         //?????
        CreateBiTree(&(*T)->lchild);//?????
        CreateBiTree(&(*T)->rchild);//?????
    }
    return 0;
}
void Visit(BiTree T) {//??
    if (T->data != '#') {
        printf("%c ",T->data);
    }
}
void PreOrder(BiTree T) {//????
    if (T != NULL) {
        Visit(T);               //?????
        PreOrder(T->lchild);    //??????
        PreOrder(T->rchild);    //??????
    }
}
void InOrder(BiTree T) {//????
    if (T != NULL) {
        InOrder(T->lchild);     //??????
        Visit(T);               //?????
        InOrder(T->rchild);     //??????
    }
}
void PostOrder(BiTree T) {//????
    if (T != NULL) {
        PostOrder(T->lchild);   //??????
        PostOrder(T->rchild);   //??????
        Visit(T);               //?????
    }
}
void PreOrder2(BiTree T) {//????(???)
//??T->data?,?T??,?????;?????????,??????T,??,?????T?????
    BiTree *stack=(BiTree *)malloc(nn*sizeof(BiTree));
    int sp=0;
    BiTree p = T;//p?????
    while (p || sp) {   //?????p?????
        if (p != NULL) {
            stack[sp]=p;sp++;       //????
            printf("%c ",p->data);  //?????
            p = p->lchild;          //?????
        } else {
            sp--;p=stack[sp];       //??
            p = p->rchild;          //?????
        }
    }
    free(stack);
}
void InOrder2(BiTree T) {//????(???)
//T?????????,??????????????,???,???????
//??T??,?????;?????????,??????T,??,??T->data,?????T?????
    BiTree *stack=(BiTree *)malloc(nn*sizeof(BiTree));
    int sp=0;
    BiTree p = T;//p?????
    while (p || sp) {   //?????p?????
        if (p != NULL) {
            stack[sp]=p;sp++;       //????
            p = p->lchild;          //?????
        } else {
            sp--;p=stack[sp];       //??
            printf("%c ",p->data);
            p = p->rchild;          //?????
        }
    }
    free(stack);
}
 
typedef struct BiTNodePost{
    BiTree biTree;
    char tag;
} BiTNodePost,*BiTreePost;
void PostOrder2(BiTree T) {//????(???)
    BiTreePost *stack=(BiTreePost *)malloc(nn*sizeof(BiTreePost));
    int sp=0;
    BiTree p = T;//p?????
    BiTreePost BT;
    while (p != NULL || sp) {//?????p?????
        while (p != NULL) {//?????
            BT = (BiTreePost)malloc(sizeof(BiTNodePost));
            BT->biTree = p;
            BT->tag = 'L';//??????
            stack[sp]=BT;sp++;       //????
            p = p->lchild;
        }
        while (sp && (stack[sp-1])->tag == 'R') {//?????????????
            sp--;BT=stack[sp];        //??
            printf("%c ",BT->biTree->data);
            free(BT);
        }
        if (sp) {//?????
            BT=stack[sp-1];
            BT->tag = 'R';//??????
            p = BT->biTree;
            p = p->rchild;
        }
    }
    free(stack);
}
void LevelOrder(BiTree T) {//????
    BiTree p;
    BiTree *queue;
    int h=0,t=0,n=0;
 
    if (T == NULL) return;
    p=T;
    queue=(BiTree *)malloc(nn*sizeof(BiTree));
    queue[t]=p;t=(t+1)%10;n++;//?????
    while (n) {    //??????
        p=queue[h];             //??????
        printf("%c ",p->data);  //??p?????
        h=(h+1)%10;n--;         //????
        if (p->lchild != NULL) {//?????,??????
            queue[t]=p->lchild;t=(t+1)%10;n++;
        }
        if (p->rchild != NULL) {//?????,??????
            queue[t]=p->rchild;t=(t+1)%10;n++;
        }
    }
    free(queue);
}
int main() {
    BiTree T;
 
    setlocale(LC_ALL,"chs");
    CreateBiTree(&T);
 
    printf("????        :");PreOrder  (T);printf("\n");
    printf("????(???):");PreOrder2 (T);printf("\n");
                                               printf("\n");
    printf("????        :");InOrder   (T);printf("\n");
    printf("????(???):");InOrder2  (T);printf("\n");
                                               printf("\n");
    printf("????        :");PostOrder (T);printf("\n");
    printf("????(???):");PostOrder2(T);printf("\n");
                                               printf("\n");
    printf("????        :");LevelOrder(T);printf("\n");
 
    return 0;
}
//ABC##DE#G##F###
//????        :A B C D E G F
//????(???):A B C D E G F
//
//????        :C B E G D F A
//????(???):C B E G D F A
//
//????        :C G E F D B A
//????(???):C G E F D B A
//
//????        :A B C D E F G
//
 
///       A
///      /
///     B
///    / \
///   C   D
///      / \
///     E   F
///      \
///       G
